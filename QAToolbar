'QA Toolbar, v. 1.0
'Dtd: 07/26/2018

Option Compare Text
Public endIt
Dim assClass As String

Sub ApplyAllFormatting(control As IRibbonControl)
    SheetFixIngestF
    autoHeaderUniquinizerIngestF
End Sub

Sub autoHeaderIngest(control As IRibbonControl)
    Call autoHeader2
    If endIt = False Then
    Exit Sub
    End If
End Sub

Sub SheetFixIngest(control As IRibbonControl)
    SheetFixIngestF
End Sub

Function SheetFixIngestF()
' Developed DTCC 3APR2017
' Nicholas Lopez nlopez@DTCC.com
' edited by Tom Holmes tholmes@dtcc.com
' Googled meaning of ";@" by Frank Castillo fcastilloandino@dtcc.com
    
    startCell = ActiveCell.Address
     Application.ScreenUpdating = False
    'Selects the cell on the first row and first column
    Range("A1").Select
    Selection.NumberFormat = "yyyy-mm-dd;@"
    
    'Clear formatting
    'Application.FindFormat.Clear
    'Application.ReplaceFormat.Clear
    
    'Set formatting
     Application.FindFormat.NumberFormat = "m/d/yyyy"
     Application.ReplaceFormat.NumberFormat = "yyyy-mm-dd;@"
    
        'Find and replace date formatting based on above defined formatting
        Cells.Replace What:="", Replacement:="", LookAt:=xlWhole, SearchOrder:= _
        xlByRows, SearchFormat:=True, ReplaceFormat:=True
    
    'Clear formatting
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    
        'Finds and replaces case for TRUE boolean values
        Cells.Replace What:="TRUE", Replacement:="'true", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
        
        'Finds and replaces case for FALSE boolean values
        Cells.Replace What:="FALSE", Replacement:="'false", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
        
         'Reset match case and entire contents
        Cells.Replace What:="", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
    
    'Clear Formatting
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    Application.ScreenUpdating = True

    'Selects the cell on the first row and second column
    
    Columns.AutoFit
    Range(startCell).Select
End Function
Sub autoHeaderFormatterIngest(control As IRibbonControl)
    autoHeaderFormatterIngestF
End Sub

Function autoHeaderFormatterIngestF()
' Developed DTCC 3APR2017
' Nicholas Lopez nlopez@DTCC.com
' autoHeader by Tom Holmes tholmes@dtcc.com
' Googled meaning of ";@" by Frank Castillo fcastilloandino@dtcc.com
    
    startCell = ActiveCell.Address
    endIt = False
    Application.ScreenUpdating = False
    Call autoHeaderF
    
    
        
    If endIt = True Then
        Exit Function
    End If
    
    'Selects the cell on the first row and first column
    Range("A1").Select
    Selection.NumberFormat = "yyyy-mm-dd;@"
    
    'Clear formatting
    'Application.FindFormat.Clear
    'Application.ReplaceFormat.Clear
    
    'Set formatting
     Application.FindFormat.NumberFormat = "m/d/yyyy"
     Application.ReplaceFormat.NumberFormat = "yyyy-mm-dd;@"
    
        'Find and replace date formatting based on above defined formatting
        Cells.Replace What:="", Replacement:="", LookAt:=xlWhole, SearchOrder:= _
        xlByRows, SearchFormat:=True, ReplaceFormat:=True
    
    'Clear formatting
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    
        'Finds and replaces case for TRUE boolean values
        Cells.Replace What:="TRUE", Replacement:="'true", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
        
        'Finds and replaces case for FALSE boolean values
        Cells.Replace What:="FALSE", Replacement:="'false", LookAt:=xlWhole, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
        
        'Reset match case and entire contents
        Cells.Replace What:="", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
    
    'Clear Formatting
    Application.FindFormat.Clear
    Application.ReplaceFormat.Clear
    Application.ScreenUpdating = True

    Columns.AutoFit
    Range(startCell).Select
           
    'ActiveWorkbook.Save 'uncomment this line to activate the autosave function.
End Function

Sub autoHeaderUniquinizerIngest(control As IRibbonControl)
    autoHeaderUniquinizerIngestF
End Sub

Function autoHeaderUniquinizerIngestF()
' Developed by Delfino Ballesteros
' May 12, 2018
    endIt = False
    Application.ScreenUpdating = False
    Call autoHeader2
    
    If endIt = True Then
        Exit Function
    End If
       
    Dim i As Integer
    Dim rCount As Integer
    
    Cells.Find(What:="asset class", After:=ActiveCell, LookIn:=xlFormulas, _
    LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False).Activate
    
    ActiveCell.Offset(1, 0).Select
    assClass = ActiveCell.Value & "_"
    
    Call findTradeIdField
    rCount = getRCount
    findTradeIdField

    For i = 1 To numOfTrades
        If (Len(ActiveCell) > 1 And Len(ActiveCell) < 26) Or (Len(ActiveCell) > 26 And Len(ActiveCell) < 53) Then
            ActiveCell.Value = formatTradeId(rCount)
            rCount = getLastFour
            ActiveCell.Offset(1, 0).Select

        ElseIf Len(ActiveCell) = 26 Then
            ActiveCell.Value = IncrementTradeId(rCount)
            rCount = getLastFour
            ActiveCell.Offset(1, 0).Select
        Else
            ActiveCell.Offset(1, 0).Select
        End If
    Next i
    
    Application.ScreenUpdating = True
    Columns.AutoFit
    ActiveCell.Select
    
    
End Function

Function autoHeaderF()
' Developed by Tom Holmes tholmes@dtcc.com
' Emotional counselor: Frank

    Application.ScreenUpdating = False
    Dim lastrecord
    Dim commentLocation
    Dim foundIt
    Dim count
    
    foundIt = False
    count = 0
    
    'checks to see if the sheet is already formatted
    If (Range("A1").Value = "*1") And (Range("A2").Value = "*comment") Then
        Range("A2").Value = "*Comment"
        Exit Function
    End If
        
    
    Set mylastcell = Cells(1, 1).SpecialCells(xlLastCell)
    Range("A1").Select
    
    'prevents formatting if more than one cell in row 1 is "*comment"
    For i = 1 To mylastcell.Row
        If (ActiveCell.Value = "*comment") Or (ActiveCell.Value = "comment") Then
            count = count + 1
        End If
         ActiveCell.Offset(1, 0).Select
    Next i
    
    If count >= 2 Then
        Application.ScreenUpdating = True
        MsgBox "More than one 'comment' found in row 1. Please verify", vbInformation, "WARNING!"
        endIt = True
        Range("A1").Select
        Exit Function
    End If
    Range("A1").Select
    
    For i = 1 To mylastcell.Row
        If ActiveCell.Value = "*comment" Then
        commentLocation = ActiveCell.Row
        foundIt = True
        Exit For
        End If
        ActiveCell.Offset(1, 0).Select
    Next i
    
    If foundIt = True Then
        
        If commentLocation <> 1 Then
            commentLocation = commentLocation - 1
            Rows("1:" & commentLocation).Select
            Selection.Delete Shift:=xlUp
        End If
            
        Range("A1").Select
        ActiveCell.Value = "*Comment" 'ensures comment is capitalized
        Selection.End(xlToRight).Select
        endColumn = ActiveCell.Column
        Rows("1:1").Select
        Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                
        Range("A1").Select
        ActiveCell.FormulaR1C1 = "*1"
         
        For i = 2 To endColumn
            ActiveCell.Offset(0, 1).Select
            ActiveCell.Value = i
        Next i
        
        Range("A1").Select
    End If
    
    If foundIt = False Then
        Range("A1").Select
        MsgBox "No '*Comment' box found in Row 1. Please verify this is the correct form you want to format", vbInformation, "WARNING!"
        Application.ScreenUpdating = True
        Range("A1").Select
        endIt = True
        Exit Function
    End If
         
        
End Function



Function findTradeIdField()
    Dim i As Integer
    Dim fieldName As String
    Dim Position(7) As Integer      'Declares an array called Position with 7 elements
    
    'Assigns values to each element within the Position Array. Values were taken from
    'each of the submission templates based on TradeId position.
    Position(1) = 53    'EU Lite Template
    Position(2) = 71    'Harmonized Template
    Position(3) = 161   'CORE EQ Template
    Position(4) = 244   'CORE CR Template
    Position(5) = 261   'CORE FX(CU) Template
    Position(6) = 580   'CORE IR Template
    Position(7) = 1153  'CORE CO Template

    'Searches through 'Position' array to find the UTI field name in the Core template
    For i = 1 To UBound(Position)
        Cells.Find(Position(i)).Select
        fieldName = ActiveCell.Offset(1, 0).Value
        If Position(i) = 53 And fieldName = "Trade ID" Then
            ActiveCell.Offset(2, 0).Select
            Exit For
        ElseIf Position(i) = 71 And fieldName = "UTI ID" Then
            ActiveCell.Offset(2, 0).Select
            Exit For
        ElseIf fieldName = "UTI" Then
           assClass = Switch(i = 3, "EQ_", i = 4, "CR_", i = 5, "FX_", i = 6, "IR_", i = 7, "CO_")
           ActiveCell.Offset(2, 0).Select
           Exit For
        Else
            'Do nothing
        End If
    Next i
End Function

Function formatTradeId(count As Integer) As String

    Dim harn As String
    Dim counter As String
    Dim newFour As Integer
    Dim dt As String

    harn = "HARNESS_AUTO_"
    dt = todaysDate
    newFour = count + 1                    'Adds 1 to the current count
    counter = Format(newFour, "0000")      'Formats counter to 4 digits
    TradeID = harn & assClass & dt & "_" & counter    'Concatenates new tradeId
    formatTradeId = TradeID
    
End Function

Function IncrementTradeId(count As Integer) As String

    Dim harn As String
    Dim counter As String
    Dim currFour As Integer
    Dim dt As String
   
   
    TradeID = ActiveCell.Value              'Save the value to the variable Val
  
    harn = getTradeIdPrefix                 'Extract the first 13 digits of tradeId
    dt = todaysDate                         'Gets todays date and saves to dt
    newFour = count + 1                     'Adds 1 to the current count
    cFour = Format(newFour, "0000")         'Increment counter by 1
    counter = CStr(cFour)
    
    newTradeId = harn & assClass & dt & "_" & counter   'Concatenate tradeId
    IncrementTradeId = newTradeId           'Post new tradeId
End Function

Function getRCount()
    Dim runningCounter As Integer
    Dim currCount As Integer
    Dim today As String
   
    today = todaysDate
    
    For i = 1 To numOfTrades
        If ActiveCell.Value <> Empty Then
            If tradeIdDate = today Then
                currCount = getLastFour
                If currCount > runningCounter Then
                    runningCounter = currCount
                    ActiveCell.Offset(1, 0).Select
                Else
                    ActiveCell.Offset(1, 0).Select
                End If
            Else
                ActiveCell.Offset(1, 0).Select
            End If
        Else
            ActiveCell.Offset(1, 0).Select
        End If
    Next i
    getRCount = runningCounter
End Function

Function todaysDate() As String
    Dim dt As Date
    Dim tdate As String
    dt = Date
    fdate = Format(dt, "yyyymmdd")          'Formats date to yyyymmdd
    tdate = CStr(fdate)                     'Converts Date to string
    todaysDate = tdate                      'Saves converted date string to function return
End Function

Function getTradeIdPrefix()
    TradeID = ActiveCell.Value              'Save the value to the variable tradeId
    Prefix = Left(TradeID, 13)              'Extract the prefix from trade Id
    getTradeIdPrefix = Prefix               'Returns the prefix string value as function value
End Function

Function tradeIdDate()
   
    Dim moveIt As Integer
    TradeID = ActiveCell.Value                          'Save the value to the variable tradeId
    datePortion = Mid(TradeID, 14 + Len(assClass), 8)   'Extract the Date from trade Id
    tradeIdDate = datePortion                           'Saves date as string to function
End Function

Function getLastFour()
    TradeID = ActiveCell.Value              'Save the value to the variable tradeId
    counter = Right(TradeID, 4)             'Extract the last three digits
    getLastFour = CInt(counter)             'Convert string to integer and save
End Function

Function headerCount() As Integer
    'Determines the number of header columns by counting the first 5 rows containing
    'an asterisk(*) in column 1.
    headerCount = Application.WorksheetFunction.CountIf(Range("A1:A5"), "~**")
    Debug.Print headerCount
End Function

Function totalNumRows() As Integer
    'Determines the total number of populated rows that are filled in by referencing
    'column B since this column will always be filled out for every applicalbe trade.
    With ActiveSheet
    totalNumRows = .Cells(.Rows.count, "B").End(xlUp).Row
    End With
    Debug.Print totalNumRows
End Function

Function numOfTrades() As Integer
    'Returns the actual number of trades by subtracting the header rows from the
    'total rows and returning the differnce
    numOfTrades = totalNumRows - headerCount
    Debug.Print numOfTrades
End Function

Function autoHeader2()

' Developed by Tom Holmes tholmes@dtcc.com
' Emotional counselor: Frank

    Application.ScreenUpdating = False
    Dim lastrecord
    Dim commentLocation
    Dim foundIt
    Dim count
    
    foundIt = False
    count = 0
    
    'checks to see if the sheet is already formatted
    If (Range("A1").Value = "*1") And (Range("A2").Value = "*comment") Then
        Range("A2").Value = "*Comment"
        Exit Function
    End If
        
    
    Set mylastcell = Cells(1, 1).SpecialCells(xlLastCell)
    Range("A1").Select
    
    'prevents formatting if more than one cell in row 1 is "*comment"
    For i = 1 To mylastcell.Row
        If (ActiveCell.Value = "*comment") Or (ActiveCell.Value = "comment") Then
            count = count + 1
        End If
         ActiveCell.Offset(1, 0).Select
    Next i
    
    If count >= 2 Then
        Application.ScreenUpdating = True
        MsgBox "More than one 'comment' found in row 1. Please verify", vbInformation, "WARNING!"
        endIt = True
       Range("A1").Select
        Exit Function
    End If
    Range("A1").Select
    
    For i = 1 To mylastcell.Row
        If ActiveCell.Value = "*comment" Then
        commentLocation = ActiveCell.Row
        foundIt = True
        Exit For
        End If
        ActiveCell.Offset(1, 0).Select
    Next i
    
    If foundIt = True Then
        
        If commentLocation <> 1 Then
            commentLocation = commentLocation - 1
            Rows("1:" & commentLocation).Select
            Selection.Delete Shift:=xlUp
        End If
            
        Range("A1").Select
        ActiveCell.Value = "*Comment" 'ensures comment is capitalized
        Selection.End(xlToRight).Select
        endColumn = ActiveCell.Column
        Rows("1:1").Select
        Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                
        Range("A1").Select
        ActiveCell.FormulaR1C1 = "*1"
         
        For i = 2 To endColumn
            ActiveCell.Offset(0, 1).Select
            ActiveCell.Value = i
        Next i
        
        Range("A1").Select
    Else
        Range("A1").Select
        MsgBox "No '*Comment' box found in Row 1. Please verify this is the correct form you want to format", vbInformation, "WARNING!"
        Application.ScreenUpdating = True
        Range("A1").Select
        endIt = True
        Exit Function
    End If
End Function



